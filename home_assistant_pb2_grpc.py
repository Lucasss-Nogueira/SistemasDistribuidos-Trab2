# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import home_assistant_pb2 as home__assistant__pb2


class TemperatureActuatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.alterarTemperatura = channel.unary_unary(
                '/TemperatureActuatorService/alterarTemperatura',
                request_serializer=home__assistant__pb2.ActuatorCommand.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class TemperatureActuatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def alterarTemperatura(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TemperatureActuatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'alterarTemperatura': grpc.unary_unary_rpc_method_handler(
                    servicer.alterarTemperatura,
                    request_deserializer=home__assistant__pb2.ActuatorCommand.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TemperatureActuatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TemperatureActuatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def alterarTemperatura(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TemperatureActuatorService/alterarTemperatura',
            home__assistant__pb2.ActuatorCommand.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LuminosityActuatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.alterarLuminosidade = channel.unary_unary(
                '/LuminosityActuatorService/alterarLuminosidade',
                request_serializer=home__assistant__pb2.ActuatorCommand.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LuminosityActuatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def alterarLuminosidade(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LuminosityActuatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'alterarLuminosidade': grpc.unary_unary_rpc_method_handler(
                    servicer.alterarLuminosidade,
                    request_deserializer=home__assistant__pb2.ActuatorCommand.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LuminosityActuatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LuminosityActuatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def alterarLuminosidade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LuminosityActuatorService/alterarLuminosidade',
            home__assistant__pb2.ActuatorCommand.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LockActuatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.alterarFechadura = channel.unary_unary(
                '/LockActuatorService/alterarFechadura',
                request_serializer=home__assistant__pb2.ActuatorCommand.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class LockActuatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def alterarFechadura(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LockActuatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'alterarFechadura': grpc.unary_unary_rpc_method_handler(
                    servicer.alterarFechadura,
                    request_deserializer=home__assistant__pb2.ActuatorCommand.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'LockActuatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class LockActuatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def alterarFechadura(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/LockActuatorService/alterarFechadura',
            home__assistant__pb2.ActuatorCommand.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class HomeAssistantServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSensorData = channel.unary_unary(
                '/HomeAssistantService/GetSensorData',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=home__assistant__pb2.SensorData.FromString,
                )
        self.ControlActuators = channel.unary_unary(
                '/HomeAssistantService/ControlActuators',
                request_serializer=home__assistant__pb2.ActuatorCommand.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )


class HomeAssistantServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSensorData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlActuators(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HomeAssistantServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSensorData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSensorData,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=home__assistant__pb2.SensorData.SerializeToString,
            ),
            'ControlActuators': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlActuators,
                    request_deserializer=home__assistant__pb2.ActuatorCommand.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'HomeAssistantService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class HomeAssistantService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSensorData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HomeAssistantService/GetSensorData',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            home__assistant__pb2.SensorData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ControlActuators(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/HomeAssistantService/ControlActuators',
            home__assistant__pb2.ActuatorCommand.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
